# application/services/calculated_market/confluence_matrix.py
"""
M√≥dulo que armazena e gerencia as regras de conflu√™ncia.
"""
from typing import Optional, Dict, Tuple


class ConfluenceMatrix:
    """Armazena e fornece acesso √†s regras de conflu√™ncia entre padr√µes e n√≠veis."""

    def __init__(self, config: dict):
        """
        Inicializa a matriz com as regras de conflu√™ncia.
        
        Args:
            config: Configura√ß√µes contendo a matriz
        """
        # Se houver regras no config, usa elas. Sen√£o, usa as padr√µes
        self.rules = config.get('matriz_confluencia', self._get_default_rules())
        
        # Regras especiais para for√ßa extrema
        self.extreme_force_threshold = config.get('extreme_force_threshold', 9)
        self.minimum_force = config.get('minimum_force', 7)
        self.minimum_confidence = config.get('minimum_confidence', 0.65)

    def _get_default_rules(self) -> Dict[Tuple[str, str], Dict]:
        """Retorna as regras padr√£o de conflu√™ncia do roadmap."""
        return {
            # üü¢ SINAIS DE COMPRA
            ('ABSORCAO_COMPRADORA', 'DEVENDO'): {
                'acao': 'COMPRA', 'confianca': 0.85, 'desc': 'Absor√ß√£o em suporte forte'
            },
            ('ABSORCAO_COMPRADORA', 'SOFGRE'): {
                'acao': 'COMPRA', 'confianca': 0.90, 'desc': 'Absor√ß√£o em suporte extremo'
            },
            ('ABSORCAO_COMPRADORA', 'PB'): {
                'acao': 'COMPRA', 'confianca': 0.75, 'desc': 'Absor√ß√£o em suporte prim√°rio'
            },
            ('EXAUSTAO_VENDEDORA', 'DEVENDO'): {
                'acao': 'COMPRA', 'confianca': 0.80, 'desc': 'Exaust√£o vendedora em suporte'
            },
            ('EXAUSTAO_VENDEDORA', 'SOFGRE'): {
                'acao': 'COMPRA', 'confianca': 0.85, 'desc': 'Exaust√£o vendedora extrema'
            },
            ('ICEBERG_COMPRADOR', 'DEVENDO'): {
                'acao': 'COMPRA', 'confianca': 0.85, 'desc': 'Iceberg comprador em suporte forte'
            },
            ('ICEBERG_COMPRADOR', 'PB'): {
                'acao': 'COMPRA', 'confianca': 0.75, 'desc': 'Iceberg comprador em suporte'
            },
            ('VOLUME_SPREAD_COMPRA', 'DEVENDO'): {
                'acao': 'COMPRA', 'confianca': 0.80, 'desc': 'Volume spread positivo em suporte'
            },
            ('TRAP', 'DEVENDO'): {
                'acao': 'COMPRA', 'confianca': 0.85, 'desc': 'Armadilha de baixa em suporte forte'
            },
            ('SQUEEZE', 'SOFGRE'): {
                'acao': 'COMPRA', 'confianca': 0.90, 'desc': 'Squeeze de baixa em suporte extremo'
            },
            
            # NOVOS PADR√ïES DE COMPRA
            ('DIVERGENCIA_ALTA', 'DEVENDO'): {
                'acao': 'COMPRA', 'confianca': 0.85, 'desc': 'Diverg√™ncia altista em suporte forte'
            },
            ('DIVERGENCIA_ALTA', 'SOFGRE'): {
                'acao': 'COMPRA', 'confianca': 0.90, 'desc': 'Diverg√™ncia altista em suporte extremo'
            },
            ('DIVERGENCIA_ALTA', 'PB'): {
                'acao': 'COMPRA', 'confianca': 0.75, 'desc': 'Diverg√™ncia altista em suporte prim√°rio'
            },
            ('MOMENTUM_EXTREMO', 'SOFGRE'): {  # Momentum de COMPRA em suporte extremo
                'acao': 'COMPRA', 'confianca': 0.85, 'desc': 'Momentum de compra extremo em suporte m√°ximo'
            },
            ('MOMENTUM_EXTREMO', 'DEVENDO'): {  # Momentum de COMPRA em suporte forte
                'acao': 'COMPRA', 'confianca': 0.80, 'desc': 'Momentum de compra em suporte forte'
            },
            
            # üî¥ SINAIS DE VENDA
            ('ABSORCAO_VENDEDORA', 'SOFRER'): {
                'acao': 'VENDA', 'confianca': 0.85, 'desc': 'Absor√ß√£o em resist√™ncia forte'
            },
            ('ABSORCAO_VENDEDORA', 'SOFRER_2X'): {
                'acao': 'VENDA', 'confianca': 0.90, 'desc': 'Absor√ß√£o em resist√™ncia extrema'
            },
            ('ABSORCAO_VENDEDORA', 'DEFENDO'): {
                'acao': 'VENDA', 'confianca': 0.75, 'desc': 'Absor√ß√£o em resist√™ncia prim√°ria'
            },
            ('EXAUSTAO_COMPRADORA', 'SOFRER'): {
                'acao': 'VENDA', 'confianca': 0.80, 'desc': 'Exaust√£o compradora em resist√™ncia'
            },
            ('EXAUSTAO_COMPRADORA', 'SOFRER_2X'): {
                'acao': 'VENDA', 'confianca': 0.85, 'desc': 'Exaust√£o compradora extrema'
            },
            ('ICEBERG_VENDEDOR', 'DEFENDO'): {
                'acao': 'VENDA', 'confianca': 0.75, 'desc': 'Iceberg vendedor em resist√™ncia'
            },
            ('ICEBERG_VENDEDOR', 'SOFRER'): {
                'acao': 'VENDA', 'confianca': 0.80, 'desc': 'Iceberg vendedor em resist√™ncia forte'
            },
            ('VOLUME_SPREAD_VENDA', 'SOFRER'): {
                'acao': 'VENDA', 'confianca': 0.80, 'desc': 'Volume spread negativo em resist√™ncia'
            },
            ('TRAP', 'SOFRER'): {
                'acao': 'VENDA', 'confianca': 0.85, 'desc': 'Armadilha de alta em resist√™ncia forte'
            },
            ('SQUEEZE', 'SOFRER_2X'): {
                'acao': 'VENDA', 'confianca': 0.90, 'desc': 'Squeeze de alta em resist√™ncia extrema'
            },
            
            # NOVOS PADR√ïES DE VENDA
            ('DIVERGENCIA_BAIXA', 'SOFRER'): {
                'acao': 'VENDA', 'confianca': 0.85, 'desc': 'Diverg√™ncia baixista em resist√™ncia forte'
            },
            ('DIVERGENCIA_BAIXA', 'SOFRER_2X'): {
                'acao': 'VENDA', 'confianca': 0.90, 'desc': 'Diverg√™ncia baixista em resist√™ncia extrema'
            },
            ('DIVERGENCIA_BAIXA', 'DEFENDO'): {
                'acao': 'VENDA', 'confianca': 0.75, 'desc': 'Diverg√™ncia baixista em resist√™ncia prim√°ria'
            },
            ('MOMENTUM_EXTREMO', 'SOFRER_2X'): {  # Momentum de VENDA em resist√™ncia extrema
                'acao': 'VENDA', 'confianca': 0.85, 'desc': 'Momentum de venda extremo em resist√™ncia m√°xima'
            },
            ('MOMENTUM_EXTREMO', 'SOFRER'): {  # Momentum de VENDA em resist√™ncia forte
                'acao': 'VENDA', 'confianca': 0.80, 'desc': 'Momentum de venda em resist√™ncia forte'
            }
        }

    def find_rule(self, pattern_name: str, level_name: str, 
                  signal_direction: Optional[str] = None) -> Optional[Dict]:
        """
        Encontra uma regra na matriz de conflu√™ncia.
        
        Args:
            pattern_name: Nome do padr√£o (ex: 'MOMENTUM_EXTREMO')
            level_name: Nome do n√≠vel (ex: 'SOFRER')
            signal_direction: Dire√ß√£o do sinal quando aplic√°vel ('COMPRA' ou 'VENDA')
            
        Returns:
            Regra encontrada ou None
        """
        # Busca b√°sica pela tupla (padr√£o, n√≠vel)
        rule = self.rules.get((pattern_name, level_name))
        
        # Se encontrou regra e h√° dire√ß√£o no sinal, valida
        if rule and signal_direction:
            rule_action = rule.get('acao', '').upper()
            signal_dir_upper = signal_direction.upper()
            
            # A regra s√≥ √© v√°lida se as dire√ß√µes batem
            if rule_action != signal_dir_upper:
                return None
        
        return rule

    def check_extreme_conditions(self, strength: int, level_name: str) -> Optional[Dict]:
        """
        Verifica condi√ß√µes especiais para for√ßa extrema.
        
        Args:
            strength: For√ßa do sinal (0-10)
            level_name: Nome do n√≠vel
            
        Returns:
            Regra especial se aplic√°vel
        """
        # For√ßa ‚â•9 + N√≠vel Extremo sempre gera sinal
        if strength >= self.extreme_force_threshold:
            if level_name == 'SOFRER_2X':
                return {
                    'acao': 'VENDA',
                    'confianca': 0.85,
                    'desc': 'For√ßa extrema em resist√™ncia m√°xima'
                }
            elif level_name == 'SOFGRE':
                return {
                    'acao': 'COMPRA',
                    'confianca': 0.85,
                    'desc': 'For√ßa extrema em suporte m√°ximo'
                }
        
        return None

    def is_valid_signal(self, rule: Dict, strength: int) -> bool:
        """
        Valida se um sinal atende aos crit√©rios m√≠nimos.
        
        Args:
            rule: Regra da matriz
            strength: For√ßa do sinal
            
        Returns:
            True se v√°lido
        """
        if not rule:
            return False
            
        # Verifica for√ßa m√≠nima
        if strength < self.minimum_force:
            return False
            
        # Verifica confian√ßa m√≠nima
        confidence = rule.get('confianca', 0)
        if confidence < self.minimum_confidence:
            return False
            
        return True